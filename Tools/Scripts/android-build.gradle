//
//  android-build.gradle
//  ChilliSource
//  Created by Ian Copland on 13/03/2015.
//
//  The MIT License (MIT)
//
//  Copyright (c) 2015 Tag Games Limited
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

apply from: '../../../../ChilliSource/Tools/Scripts/android-build-manifest.gradle'
apply from: '../../../../ChilliSource/Tools/Scripts/android-build-ndk.gradle'
apply from: '../../../../ChilliSource/Tools/Scripts/android-build-variant-utils.gradle'
apply from: '../../../../ChilliSource/Tools/Scripts/android-build-resources.gradle'
apply from: '../../../../ChilliSource/Tools/Scripts/android-push-apk-expansion.gradle'

import com.sun.tools.classfile.Dependency

/**
 * Adds the static library clean ndk task to the given task as a dependency.
 *
 * @author Ian Copland
 *
 * @param in_task - The task to add the dependency to.
 * @param in_libName - The name of the static library.
 */
def addCleanNdkStaticLibTask(def in_task, String in_libName) {
    def cleanTask = task("csCleanNdk", overwrite: true) << {
        csNdkBuildCleanStaticLib(in_libName)
    }
    in_task.dependsOn(cleanTask)
}
/**
 * Adds the static library compile ndk task to the given task as a dependency.
 *
 * @author Ian Copland
 *
 * @param in_task - The task to add the dependency to.
 * @param in_libName - The name of the static library.
 */
def addCompileNdkStaticLibTask(def in_task, String in_libName) {
    def sku = csGetSkuFromTaskName(in_task.name)
    def abi = csGetAbiFromTaskName(in_task.name)
    def debug = csIsDebugFromTaskName(in_task.name)
    def variantName = csGenerateVariantName(sku, abi, debug)

    def csCompileTask = task("csCompileNdk$variantName", overwrite: true) << {
        csNdkBuildStaticLib(sku, abi, debug, in_libName)
    }

    //This is a hack to ensure ChilliSource is only built for the ABI/SKU/config that the
    //application is being built for. This has the draw-back that ChilliSource can no longer
    //be built on its own, so hopefully a better solution presents itself in the future.
    csCompileTask.onlyIf {
        def taskGraph = gradle.taskGraph
        for (def aTask : taskGraph.getAllTasks()) {
            if (aTask.project.name.equals("app") && aTask.name.equals(csCompileTask.name)) {
                return true
            }
        }
        return false
    }
    in_task.dependsOn(csCompileTask)
}
/**
 * Adds the application ndk clean task to the given task as a dependency.
 *
 * @author Ian Copland
 *
 * @param in_task - The task to add the dependency to.
 */
def addCleanNdkTask(def in_task) {
    def cleanTask = task("csCleanNdk", overwrite: true) << {
        csNdkBuildClean()
    }
    in_task.dependsOn(cleanTask)
}
/**
 * Adds the application generate android manifest task to the given task as a dependency.
 *
 * @author Ian Copland
 *
 * @param in_task - The task to add the dependency to.
 */
def addGenerateAndroidManifestTask(def in_task) {
    def sku = csGetSkuFromTaskName(in_task.name);
    if (csIsGooglePlaySku(sku)) {
        task "csGenerateGooglePlayAndroidManifest" (overwrite: true) << {
            csGenerateGooglePlayAndroidManifest()
        }
        in_task.dependsOn("csGenerateGooglePlayAndroidManifest")
        
    } else if (csIsAmazonSku(sku)) {
        task "csGenerateAmazonAndroidManifest" (overwrite: true) << {
            csGenerateAmazonAndroidManifest()
        }
        in_task.dependsOn("csGenerateAmazonAndroidManifest")
        
    } else { 
        throw new GradleException("Invalid sku for task '${in_task.name}'") as Throwable
    }
    
}
/**
 * Adds the application ndk compile task to the given task as a dependency.
 *
 * @author Ian Copland
 *
 * @param in_task - The task to add the dependency to.
 */
def addCompileNdkTask(def in_task) {
    def sku = csGetSkuFromTaskName(in_task.name)
    def abi = csGetAbiFromTaskName(in_task.name)
    def debug = csIsDebugFromTaskName(in_task.name)
    def variantName = csGenerateVariantName(sku, abi, debug)

    task "csCompileNdk$variantName" (dependsOn: ":chillisource:csCompileNdk$variantName", overwrite: true) << {
        csNdkBuild(sku, abi, debug)
    }

    in_task.dependsOn("csCompileNdk$variantName")
}
/**
 * Adds the application generate resources task to the given task as a dependency. This only applies
 * to Amazon builds.
 *
 * @author Ian Copland
 *
 * @param in_task - The task to add the dependency to.
 */
def addGenerateResourcesTask(def in_task) {
    def sku = csGetSkuFromTaskName(in_task.name)
    if (csIsAmazonSku(sku)) {
        task "csGenerateApkResources" (dependsOn: "csGenerateAmazonAndroidManifest", overwrite: true) << {
            csGenerateApkAssets()
        }
        in_task.dependsOn("csGenerateApkResources")
    }
}
/**
 * Adds the task for the getting the applicationId and versionCode to each of the check manifest
 * tasks as a depedency.
 *
 * @author Ian Copland
 *
 * @param in_defaultConfig - The default configuration
 * @param in_applicationVariants - The list of application variants
 */
def addGetInfoTasks(def in_defaultConfig, def in_applicationVariants) {
    in_applicationVariants.all() { in_variant ->
        in_variant.outputs.each { in_output ->
            def getInfoTask = task "csGetVariantInfo${csUpperCaseFirstLetter(in_output.name)}"() << {
                g_applicationId = in_defaultConfig.applicationId

                for (def i = 0; i < in_variant.productFlavors.size(); ++i)
                {
                    def flavourApplicationId = in_variant.productFlavors.get(i).applicationId
                    if (flavourApplicationId != null && flavourApplicationId.length() > 0) {
                        g_applicationId = flavourApplicationId
                    }
                }

                def suffix = in_variant.buildType.applicationIdSuffix
                if (suffix != null && suffix.length() > 0) {
                    g_applicationId += suffix
                }

                g_versionCode = in_defaultConfig.versionCode
                g_versionName = in_defaultConfig.versionName

                for (def i = 0; i < in_variant.productFlavors.size(); ++i)
                {
                    def productFlavour = in_variant.productFlavors.get(i)
                    if (productFlavour.versionCode != null && productFlavour.versionCode > 0) {
                        g_versionCode = productFlavour.versionCode
                        g_versionName = productFlavour.versionName
                    }
                }
            }
            in_output.processManifest.dependsOn getInfoTask
        }
    }
}
/**
 * Adds the push Apk Expansion task.
 *
 * @author Ian Copland
 *
 * @param in_applicationVariants - The list of application variants
 */
def addApkExpansionTasks(def in_applicationVariants) {
    in_applicationVariants.all() { in_variant ->
        in_variant.outputs.each { in_output ->
            def sku = csGetSkuFromTaskName(in_output.name)
            if (csIsGooglePlaySku(sku)) {
                task "csAssembleApkExpansion${csUpperCaseFirstLetter(in_output.name)}"(group: 'buildApkExpansion', dependsOn: in_output.processManifest) << {
                    csGenerateApkExpansion(g_applicationId, g_versionCode)
                }

                task "csInstallApkExpansion${csUpperCaseFirstLetter(in_output.name)}"(group: 'installApkExpansion', dependsOn: "csAssembleApkExpansion${csUpperCaseFirstLetter(in_output.name)}") << {
                    csPushApkExpansionToDevice(g_applicationId, g_versionCode)
                }
            }
        }
    }
}

ext {
    g_applicationId = ""
    g_versionCode = 0
    g_versionName = ""

    /**
     * Adds task dependencies as required for building a ChilliSource library.
     *
     * @author Ian Copland
     *
     * @param in_tasks - The gradle tasks dependencies will be added to.
     * @param in_libName - The name of the library, without the lib prefix and .a suffix.
     */
    csInitLibrary = { in_tasks, in_libName ->
        in_tasks.all() { currentTask ->
            def taskName = currentTask.name.toLowerCase()

            //If it is the "clean" task also hook in the ChilliSource clean event.
            if (taskName == "clean") {
                addCleanNdkStaticLibTask(currentTask, in_libName)

            //if it is a ndk compile task, replace it with the ChilliSource ndk compile task.
            } else if (taskName.startsWith("compile") == true && taskName.endsWith("ndk") == true) {
                currentTask.dependsOn.clear()
                currentTask.deleteAllActions()

                //exclude test tasks to avoid duplicate version of the created task.
                if (csIsTestFromTaskName(taskName) == false) {
                    addCompileNdkStaticLibTask(currentTask, in_libName)
                }
            }
        }
    }
    /**
     * Adds task dependencies as requires for building a ChilliSource application.
     *
     * @author Ian Copland
     *
     * @param in_tasks - The applications gradle project
     * @param in_defaultConfig - The default configuration
     * @param in_applicationVariants - The list of application variants
     */
    csInitApplication = { in_tasks, in_defaultConfig, in_applicationVariants ->
        addGetInfoTasks(in_defaultConfig, in_applicationVariants)

        addApkExpansionTasks(in_applicationVariants)

        in_tasks.all() { currentTask ->
            def taskName = currentTask.name.toLowerCase()

            //if it is the 'clean' task also hook in the ChilliSource clean event.
            if (taskName == "clean") {
                addCleanNdkTask(currentTask)

            //if it is a process manifest task, add the genate manifest task as a dependancy
            } else if (taskName.startsWith("check") == true && taskName.endsWith("manifest") == true) {
                addGenerateAndroidManifestTask(currentTask)
                addGenerateResourcesTask(currentTask)

            //if it is a ndk compile task, replace it with the ChilliSource ndk compile task.
            } else if (taskName.startsWith("compile") == true && taskName.endsWith("ndk") == true) {
                currentTask.dependsOn.clear()
                currentTask.deleteAllActions()

                //exclude test tasks to avoid duplicate version of the created task.
                if (csIsTestFromTaskName(taskName) == false) {
                    addCompileNdkTask(currentTask)
                }
            }
        }
    }
    /**
     * Adds the default library dependencies required by ChilliSource.
     *
     * @author Ian Copland
     *
     * @param in_dependencies - The dependencies.
     */
    csAddDefaultDependencies = { in_dependencies ->
        in_dependencies.compile('com.android.support:appcompat-v7:22.2.0')
        in_dependencies.compile('com.google.android.gms:play-services:7.5.0')
        in_dependencies.googlePlayCompile(in_dependencies.project(path: ":playapkexpansion"))
        in_dependencies.googlePlayCompile(in_dependencies.project(path: ":playlicensing"))
    }
    /**
     * Android Gradle currently does not support dependencies for specific combinations of build
     * type and product flavour. This provides a means to handle it, by mapping application
     * build variant to a ChilliSource build variant.
     *
     * @author Ian Copland
     *
     * @param in_dependencies - The dependencies.
     * @param in_configurations - The configurations.
     * @param in_csDependencyMap - The map of application variants to ChilliSource variants.
     */
    csAddCSDependencies = { in_dependencies, in_configurations, in_csDependencyMap ->
        def depsMap = new HashMap<String, Dependency>()
        for (def entry : in_csDependencyMap) {
            depsMap.put("${entry.getKey()}Compile" as String, in_dependencies.project(path: ":chillisource", configuration: entry.getValue()))
        }

        in_configurations.all() { config ->
            def dep = depsMap.get("${config.name}" as String)
            if(dep != null) {
                config.dependencies.add(dep)
            }
        }
    }
    /**
     * External library projects are currently bugged such that they depend on all build variants
     * in a project. This causes a number of issues (and long build times!) for native projects,
     * so this can be used to solve the issue for the default dependencies.
     *
     * @author Ian Copland
     *
     * @param in_tasks - All tasks in the android project.
     */
    csFixDefaultLibraryDependancies = { in_tasks ->
        in_tasks.all() { task ->
            tasksToClear = [
                "prepareComAndroidSupportAppcompatV72220Library",
                "prepareComAndroidSupportMediarouterV72200Library",
                "prepareComAndroidSupportSupportV42220Library",
                "prepareComGoogleAndroidGmsPlayServices750Library",
                "prepareComGoogleAndroidGmsPlayServicesAds750Library",
                "prepareComGoogleAndroidGmsPlayServicesAnalytics750Library",
                "prepareComGoogleAndroidGmsPlayServicesAppindexing750Library",
                "prepareComGoogleAndroidGmsPlayServicesAppinvite750Library",
                "prepareComGoogleAndroidGmsPlayServicesAppstate750Library",
                "prepareComGoogleAndroidGmsPlayServicesBase750Library",
                "prepareComGoogleAndroidGmsPlayServicesCast750Library",
                "prepareComGoogleAndroidGmsPlayServicesDrive750Library",
                "prepareComGoogleAndroidGmsPlayServicesFitness750Library",
                "prepareComGoogleAndroidGmsPlayServicesGames750Library",
                "prepareComGoogleAndroidGmsPlayServicesGcm750Library",
                "prepareComGoogleAndroidGmsPlayServicesIdentity750Library",
                "prepareComGoogleAndroidGmsPlayServicesLocation750Library",
                "prepareComGoogleAndroidGmsPlayServicesMaps750Library",
                "prepareComGoogleAndroidGmsPlayServicesNearby750Library",
                "prepareComGoogleAndroidGmsPlayServicesPanorama750Library",
                "prepareComGoogleAndroidGmsPlayServicesPlus750Library",
                "prepareComGoogleAndroidGmsPlayServicesSafetynet750Library",
                "prepareComGoogleAndroidGmsPlayServicesWallet750Library",
                "prepareComGoogleAndroidGmsPlayServicesWearable750Library",
            ]

            if (tasksToClear.contains(task.name)) {
                task.dependsOn.clear()
            }
        }
    }
}